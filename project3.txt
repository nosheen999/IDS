#include <stdlib.h>
#include <string.h>

// Enums for clarity
enum TennisScoreValue
{
    LOVE,
    FIFTEEN,
    THIRTY,
    FORTY
};

enum PlayerIdentifier
{
    PLAYER1,
    PLAYER2
};

// Abstract class and concrete subclasses for polymorphism
struct TennisState
{
    const char* scoreString;
    const char* player1Name;
    const char* player2Name;

    const char* GetScoreString();
};

struct LoveAllState : public TennisState
{
    const char* GetScoreString() override;
};

struct AdvantageState : public TennisState
{
    int scoreDifference;

    const char* GetScoreString() override;
};

struct WinState : public TennisState
{
    int scoreDifference;

    const char* GetScoreString() override;
};

// TennisScoreboard encapsulating score data
struct TennisScoreboard
{
    int m_score1;
    int m_score2;
    char score[18];

    void UpdateScore(int score1, int score2);
    const char* GetScoreString();
};

// Function declarations
struct TennisGame* TennisGame_Create(const char* player1Name, const char* player2Name);
void TennisGame_WonPoint(struct TennisGame* game, const char* playerName);
const char* TennisGame_GetScore(struct TennisGame* game);

// Function definitions
struct TennisState* CreateTennisState(int score1, int score2, const char* player1Name, const char* player2Name);

// Create TennisState based on game scores
struct TennisState* CreateTennisState(int score1, int score2, const char* player1Name, const char* player2Name)
{
    if (score1 == score2)
    {
        return new LoveAllState{player1Name, player2Name};
    }
    else if (score1 >= 4 || score2 >= 4)
    {
        int scoreDifference = score1 - score2;
        if (abs(scoreDifference) == 1)
        {
            return new AdvantageState{player1Name, player2Name, scoreDifference};
        }
        else
        {
            return new WinState{player1Name, player2Name, scoreDifference};
        }
    }
    else
    {
        return nullptr;
    }
}

// Implementation of TennisState methods
const char* TennisState::GetScoreString()
{
    return scoreString;
}

const char* LoveAllState::GetScoreString()
{
    strcpy(const_cast<char*>(scoreString), "Love-All");
    return scoreString;
}

const char* AdvantageState::GetScoreString()
{
    if (scoreDifference == 1)
    {
        strcpy(const_cast<char*>(scoreString), "Advantage player1");
    }
    else
    {
        strcpy(const_cast<char*>(scoreString), "Advantage player2");
    }
    return scoreString;
}

const char* WinState::GetScoreString()
{
    if (scoreDifference >= 2)
    {
        strcpy(const_cast<char*>(scoreString), "Win for player1");
    }
    else
    {
        strcpy(const_cast<char*>(scoreString), "Win for player2");
    }
    return scoreString;
}

// Implementation of TennisScoreboard methods
void TennisScoreboard::UpdateScore(int score1, int score2)
{
    m_score1 = score1;
    m_score2 = score2;
}

const char* TennisScoreboard::GetScoreString()
{
    struct TennisState* state = CreateTennisState(m_score1, m_score2, "player1", "player2");
    if (state != nullptr)
    {
        strcpy(score, state->GetScoreString());
        delete state;
    }
    else
    {
        // Handle other cases if needed
    }
    return score;
}

// Strategy: Detecting Duplicated Code
const char* CalculateTennisScore(int score)
{
    switch (score)
    {
    case 0:
        return "Love";
    case 1:
        return "Fifteen";
    case 2:
        return "Thirty";
    case 3:
        return "Forty";
    default:
        return "";
    }
}

// Implementation of TennisGame functions
struct TennisGame* TennisGame_Create(const char* player1Name, const char* player2Name)
{
    struct TennisGame* newGame = malloc(sizeof(struct TennisGame));
    newGame->m_score1 = 0;
    newGame->m_score2 = 0;
    newGame->player1Name = player1Name;
    newGame->player2Name = player2Name;
    return newGame;
}

void TennisGame_WonPoint(struct TennisGame* game, const char* playerName)
{
    if (strcmp(playerName, "player1") == 0)
    {
        game->m_score1 += 1;
    }
    else
    {
        game->m_score2 += 1;
    }
}

const char* TennisGame_GetScore(struct TennisGame* game)
{
    struct TennisScoreboard scoreboard;
    scoreboard.UpdateScore(game->m_score1, game->m_score2);
    return scoreboard.GetScoreString();
}
